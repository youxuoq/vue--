            vue-heros

脚手架 vue-cli
    vue-cli 作用
        框架创建vue的项目结构, 并配置好一些基础设施

    配置package.json
        "serve": "vue-cli-service serve --open"
            加 --open 自动打开浏览器

    style标签的scoped
        让样式只在当前组件中生效

    单文件组件使用演示
        1. 创建 .vue文件
        2. 导入单文件组件 import xx from './....'
        3. 在使用的组件中注册组件 component
        4. 在视图中使用组件 <hero-list></hero-list>

    组件存放位置
        component 文件夹
            存放通用 /公用组件
        views文件夹 (新建的)
            存放路由组件

    使用npm run serve 启动项目

调整模板
    将vue-cli生成的文件夹中无用的代码进行删除

首页展示
    1. 导入素材,将课程包中的index.html的标签结构放在App.vue的template中
    2. 安装bootstrap@3.3.7 (index.html是基于bootstrap发开的)在vue项目中也要安装和导入
    3. 在main.js中引入bootstrap 和 index.css

提取头部组件
    1. 在components中新建AppHeader.vue

    2. 修改App.vue的template 把头部的结构抽取到AppHeader.vue的template中

    3. 在App.vue中使用AppHeader.vue
        1. App.vue中导入AppHeader.vue
            import AppHeader from './components/AppHeader.vue'
        2. 在App.vue的中注册组件
            export dufault {
                components: {
                    AppHeader
                }
            }
        3.在App.vue中的template中原来头部的位置使用AppHeader
            <app-header></app-header>

提取侧边栏组件
    1. 在components中新建AppSidebar.vue

    2. 将App.vue中template中的侧边栏部分 抽取到 AppSidebar.vue的template中

    3. 在App.vue中使用AppSidebar.vue
        1. 导入AppSidebar.vue
            import AppSidebar from './comonents/AppSidebar.vue'
        2. 在export dufault中注册AppSidebar组件
            export dufault {
                components: {
                    AppSidebar
                }
            }
        3. 在template中原来侧边栏的位置使用AppSidebar组件
            <app-sidebar></app-sidebar>

vue-router使用
    1. 下载vue-router
    2. 在入口文件 main.js 配置 vue-router
        1. 导入vue-router
            import VueRouter from 'vue-router'
        2. 安装路由插件
            Vue use(VueRouter)
        3. 创建路由对象
            const router = VueRouter({
                //配置路由规则
                routes: []
            })
        4. 在vue实例中挂载路由对象
            new vue({
                //配置路由
                router
            })

路由组件
    在views 文件中创建 heroes文件夹(英雄列表) weapons文件夹(武器列表) equips文件夹(装备列表)

    heroes 英雄列表
        1. 创建HeroList.vue 文件

        2. 将APP.vue中的内容区域部分抽取到HeroList.vue文件中的template中

        3. 在main.js文件中 导入HeroList.vue路由组件
            import HeroList from './views/heroes/HeroList.vue'

        4. 在main.js文件中配置HeroList路由组件规则
            {name: 'heroes', path; '/heroes', component: HeroList}

        5. 在AppSidebar.vue文件中更改侧边栏的标签 并添加用来高亮显示的类名
                <router-link class="active" to="/heroes" tag="li"><a>英雄列表</a></router-link>
                <router-link to="/heroes" tag="li"><a>武器列表</a></router-link>
                <router-link to="/heroes" tag="li"><a>装备列表</a></router-link>

        6. 在App.vue中原来内容区域的位置创建路由视图 显示路由组件
            <router-view></router-view>

    武器列表和装备列表
        1. weapons文件夹(武器列表)中创建WeaponsList.vue 文件
           equips文件夹(装备列表)中创建EquipsList.vue 文件

        2. 将APP.vue中的内容区域部分抽取到 武器和装备的.vue文件中的template中

        3. 在main.js文件中导入 武器和装备的路由组件
            import WeapnsList from './views/weapons/WeaponsList.vue'
            import EquipsList from './views/equips/EquipsList.vue'

        4. 在main.js文件中配置 武器和装备的路由组件规则
            {name: 'weapons', path; '/weapons', component: WeaponsList},
            {name: 'equips', path; '/equips', component: EquipsList}

高亮显示
    将bootstrap自带的高量显示类名active通过
    main.js中的路由对象中的路由规则里 添加LinkExactActiveClass 进行全局配置
            LinkExactActiveClass: "active",

提取路由模块
    1. 在src文件下新建一个router.js文件
    2. 将main.js中所有跟路由相关的代码提取到 router.js中
        注意:
            路由模块使用了vue组件 所以在router.js中也要引入vue模块
                import Vue from 'vue'
            将路由模块导出
                report default router
    3. 在main.js中导入router.js模块
        import routre from './router.js'

json-server
    1. 导入db.json文件
    2. 安装json-server
        npm i json-server
    3. 启动json-server
        json-server --watch db.json
            将db.json 文件 渲染成后台数据接口


发送axios请求数据渲染列表
    1. 发送请求获取英雄列表数据
        1. 在项目中安装axios
            npm i axios

        2. 在HeroList中的script标签中引入axios
            import axios from 'axios'

        3. 在HeroList中的export default中定义data来保存数据
                export default {
                    data() {
                        return {
                            //存储英雄列表数据
                            list: []
                        }
                    }
                }
        4. 在mounted中调用 (mounted会在组件加载完成后执行)
            mounted() {
                //调用
                this.loadData
            }

        5. 在methods中定义loadData方法发送请求获取数据
            methods: {
                loadData() {
                    axios
                        .get('http://localhost:3000/heroes')  //发送请求
                        .then( (respones) => { //获取数据
                            const {data, status} = response  //对数据进行处理 (结构赋值)
                            if (status === 200) {
                                //把数据存储到list中
                                this.list = data
                            } else {
                                alert('获取数据失败')
                            }
                        })
                        .catch (err) => {
                            alert('服务器异常' + err);
                        }

                }
            }

        6. 修改HeroList.vue中的代码 将数据添加到标签中
            1. theader 表头部分
                将表头的th标签的内容修改为数据对应的字段 多余的删除
                    <th>#</th>
                    <th>姓名</th>
                    <th>性别</th>
                    <th>操作</th>
            2. tbody 表体部分
                将tbody中的tr只留一个其余的全部删除
                对剩余的一组tr进行遍历
                    参数1: 数组中的每一项
                    参数2: 对影响的索引
                    :key: 唯一值   (用来提高性能)
                <tr v-for="(item, index) in list" :key="item.id">
                    <td>{{index + 1}}</td>
                    <td>{{item.name}}</td>
                    <td>{{item.gebder}}</td>
                    <td>
                        <a href="edit.html">edit</a>
                            &nbsp;&nbsp;
                        <a href="javascript:window.confirm('Are you sure?')">delete</a>
                    </td>
                </tr>

    2. 发送请求获取显示武器列表
        1. 在WeaponsList.vue中的script标签中引入axios
            import axios from 'axios'
        2. 在WeaponsList.vue的export default中定义data()方法用来保存数据
            data() {
                return {
                    list: []
                }
            },
        4. 在WeaponsList.vue的export default中定义mounted()方法 调用loadDate
            mounted() {
                this.loadData()
            },
        5. 在WeaponsList.vue的export default中的methds选项中定义发送请求的方
            methods: {
                //定义发送请求的方法
                loadData() {

                    axios
                        .get(' http://localhost:3000/weapons')  // 发送请求
                        .then( (response) => {  // 接收返回数据
                            const {data, status} = response  // 使用解构赋值 处理数据
                            if (status === 200) {  // 判断返回的状态码
                                this.list = data  // 将data中的数据(返回的数据) 赋值到list中
                            } else {
                                alert('获取数据失败')
                            }
                        })
                        .catch ( (err) => {
                            alert('服务器异常')
                        })
                }
            }
        6. 修改WeaponsList.vue的template中的代码
            1. theader 部分
                <tr>
                    <th>#</th>
                    <th>{{名称}}</th>
                    <th>{{类型}}</th>
                    <th>{{操作}}</th>
                </tr>
            2. tbody 部分
                将tbody中的tr只留一个其余的全部删除
                对剩余的一组tr进行遍历
                    参数1: 数组中的每一项
                    参数2: 对影响的索引
                    :key: 唯一值   (用来提高性能)
                <tr v-for="(item, index) in list" :key="item.id">
                    <td>{{index + 1}}</td>
                    <td>{{item.name}}</td>
                    <td>{{item.type}}</td>
                    <td>
                        <a href="edit.html">edit</a>
                            &nbsp;&nbsp;
                        <a href="javascript:window.confirm('Are you sure?')">delete</a>
                    </td>
                </tr>

    3. 发送请求获取显示装备列表
        1. 在EquipsList.vue中的script标签中引入axios
            import axios from 'axios'
        2. 在EquipsList.vue的export default中定义data()方法用来保存数据
            data() {
                return {
                    list: []
                }
            },
        4. 在EquipsList.vue的export default中定义mounted()方法 调用loadDate
            mounted() {
                this.loadData()
            },
        5. 在EquipsList.vue的export default中的methds选项中定义发送请求的方
            methods: {
                //定义发送请求的方法
                loadData() {

                    axios
                        .get(' http://localhost:3000/weapons')  // 发送请求
                        .then( (response) => {  // 接收返回数据
                            const {data, status} = response  // 使用解构赋值 处理数据
                            if (status === 200) {  // 判断返回的状态码
                                this.list = data  // 将data中的数据(返回的数据) 赋值到list中
                            } else {
                                alert('获取数据失败')
                            }
                        })
                        .catch ( (err) => {
                            alert('服务器异常')
                        })
                }
            }
        6. 修改EquipsList.vue的template中的代码
            1. theader 部分
                <tr>
                    <th>#</th>
                    <th>{{名称}}</th>
                    <th>{{类型}}</th>
                    <th>{{操作}}</th>
                </tr>
            2. tbody 部分
                将tbody中的tr只留一个其余的全部删除
                对剩余的一组tr进行遍历
                    参数1: 数组中的每一项
                    参数2: 对影响的索引
                    :key: 唯一值   (用来提高性能)
                <tr v-for="(item, index) in list" :key="item.id">
                    <td>{{index + 1}}</td>
                    <td>{{item.name}}</td>
                    <td>{{item.type}}</td>
                    <td>
                        <a href="edit.html">edit</a>
                            &nbsp;&nbsp;
                        <a href="javascript:window.confirm('Are you sure?')">delete</a>
                    </td>
                </tr>


发送axios请求实现删除功能
    在三个路由中 (HeroList.vue, WeaponsList.vue, EquipsList.vue)
        1. 修改teplate中的删除标签
            1. 阻止标签的默认事件
                href="javascript:"
            2. 给标签添加click事件
                @click="del(item.id)"
                    //点击后 调用del方法(item.id 是调用方法是传入的实参)

        2. 在methods中添加del方法发送请求
            del(id) {  // (id 是形参)
                //提示是否删除
                if (!confirm('确定要删除吗')) {
                    return false
                }
                //发送请求
                axios
                    .delete(`http://localhost:3000/页面对应的路由地址/${id}`)
                    //接收数据
                    .then( (response) => {
                        //处理数据 (解构赋值)
                        const {status} = respones
                        if (status === 200) {
                            //删除成功 重新渲染页面
                            this.loadData()
                        }
                        else {
                            alert('删除失败')
                        }
                    })
                    .catch( (err) => {
                        alert('服务器异常' + err)
                    })
            }


发送axios请求实现添加功能
    1. 给英雄列表 武器列表和装备列表 这三个组件添加 显示添加数据路由
        1. 在views下的三个文件中 分别创建对应的 HeroAdd.vue WeaponsAdd.vue equipsAdd.vue 组件
        2. 在router.js中导入组件 并配置路由规则
            1. 导入路由组件
                import HeroAdd from './views/heroes/HeroAdd'
                import WeaponsAdd from './views/weapons/WeaponsAdd'
                import EquipsAdd from './views/equips/EquipsAdd'
            2. 配置路由规则
                {name: 'heroesadd', path: '/heroes/add', component: 'HeroAdd'}
                {name: 'weaponsadd', path: '/weapons/add', component: 'WeaponsAdd'}
                {name: 'equipsadd', path: '/equips/add', component: 'EquipsAdd'}
        3. 在HeroList.vue中将添加按钮的标签改换为 router-link
            <router-link to="/Heroes/add">添加</router-link>

    注意: 如果高亮显示有问题 以下步骤可以解决
        1. 在router.js中将代码
            //配置高亮显示的类名 当url中的路由地址 跟a标签的href中路由地址精确匹配的时候 添加类样式
            linkExactActiveClass: 'active'
            跟改为
            // 当url中的路由地址, 包含a标签的href的路由地址的时候, 添加类样式
            linkActiveClass: 'active'

    2. 完成添加数据功能
        1. 在每一个添加组件中 导入axios
            import axios from axios

        2. 在export default中定义data方法 再使用formData获取表单数据
            export default {
                data () {
                    return {
                        formData: {
                            name: '',
                            gender: '男'  // 装备列表/武器列表 使用 type: ''
                        }
                    }
                },
            }

        3. 在表单中的input里使用 v-model将formData选项中的属性绑定在对应的input标签上 (将数据进行双向绑定)
            <input type="text" v-model="formData.name" >
            <input type="text" v-model="formData.gender" > 装备列表/武器列绑定 formData.type
        4. 在export default中使用 methods 组件定义发送请求的方法
            export default {
                methods: {
                    add () {
                        //发送请求
                        axios
                            .post('http://localhost:3000/当前路由对应的上级路由名称', this.formData) //将formData中的数据一起发送

                            //返回的数据
                            .then( (respones) => {
                                //处理返回的数据 (得到返回的状态码)
                                const status = respones.status
                                //判断返回的状态码
                                if (status === 201) {
                                    //添加成功 返回上级路由
                                    this.$router.push( {name: '对应的上级路由的name值'} ) //上级路由 heroes weapons equips
                                } else {
                                    alert('添加失败')
                                }
                            })
                            .catch( (err)=> {
                                alert('服务器异常' + err)
                            })
                    }
                }
            }
        5. 在添加按钮上绑定click事件发送add中定义好的方法
            <button @click="add">添加</button>

发送axios请求实现修改功能
    显示编辑路由组件
        1. 在views下的英雄列表 武器列表和装备列表文件中 分别创建对应的路由组件
            HeroEdit.vue
            WeaponsEdit.vue
            EquipsEdit.vue

        2. 在router.js中导入组件 并配置路由规则
            1. 导入路由组件
                import HeroEdit from './views/heroes/HeroEdit'
                import WeaponsEdit from './views/weapons/WeaponsEdit'
                import EquipsEdit from './views/equips/EquipsEdit'

            2. 配置路由规则
                    //动态路由 使用时要传入id参数
                {name: 'heroesedit', path: '/heroes/edit/:id', component: 'Heroedit'}
                {name: 'weaponsedit', path: '/weapons/edit/:id', component: 'Weaponsedit'}
                {name: 'equipsedit', path: '/equips/edit/:id', component: 'Equipsedit'}

        

        3. 在HeroEdit.vue WeaponsEdit.vue EquipsEdit.vue 组件中的export default中定义data方法 再使用formData获取表单数据
            export default {
                data () {
                    return {
                        //双向绑定数据
                        formData: {
                            name: '',
                            gender: ''  // 装备列表/武器列表 使用 type: ''
                        }
                    }
                },
            }

        4. 使用v-model将formData选项中的属性绑定在对应的input标签上实行数据双向绑定
            v-model="formData.name"
            v-model="formData.geder" / v-model="formData.type"

        5. 将HeroList.vue WeaponsList.vue EquipsLis.vue 中的编辑按钮的标签改换为router-link
            <router-link :to="{name: 'heroesedit', params: {id: item.id}}">编辑</router-link>
            <router-link :to="{name: 'weaponsedit', params: {id: item.id}}">编辑</router-link>
            <router-link :to="{name: 'equipsedit', params: {id: item.id}}">编辑</router-link>
                //方法二
            <router-link :to="'/heroes/edit' + item.id">编辑</router-link>
            <router-link :to="'/weapons/edit' + item.id">编辑</router-link>
            <router-link :to="'/equips/edit' + item.id">编辑</router-link>

    实现编辑功能
        1. 修改router.js中的路由对象中的路由规则
            {name: "heroesedit", path: '/heroes/edit/:id', component: HeroEdit, props: true},
            {name: 'weaponsedit', path: '/weapons/edit/:id', component: WeaponsEdit, props: true},
            {name: 'equipsedit', path: '/equips/edit/:id', component: EquipsEdit, props: true}

        2. 在 HeroEdit.vue WeaponsEdit.vue EquipsEdit.vue中
            1. 在script中引入axios
                import axios from 'axios'
            2.在export default中使用props接收外部传递的参数
                export default {
                    props: ['id'],
                }
            3. 在export default 中的methods组件里 定义发送请求的方法
                export default {
                    methods: {
                        //定义发送请求的方法
                        loadDataById(id) {
                            //发送请求
                            axios
                                .get(`http://localhost:3000/${this.id}`)
                                //接收返回的数据
                                .then( (respons)=> {
                                    //处理数据 (得到返回的状态码)
                                    const {data, status} = respons
                                    //判断返回的状态码
                                    if (status ===  200) {
                                        //将返回的数据保存到formData中
                                        this.formData = data
                                    } else {
                                        alert('显示数据是失败')
                                    }
                                })
                                .catch( (err) => {
                                    alert('服务器异常' + err)
                                })

                        }

                    },
                }

            4. 在export default中定义mounted 方法 mounted方法会在组件加载完成后自动调用
                export default {
                    mounted () {
                        //调用发送请求的方法
                        this.loadDataById()
                    }
                }

        3. 给修改组件的提交按钮注册点击事件 (.prevent 阻止默认事件)
            <button @lick.prevent="updata>提交<button>

        4. 在修改组件的export default定义修改数据的方法
            export default {
                methods() {
                    //定义发送请求的方法
                    update() {
                        //发送请求 并将表单中的数据一起发送
                        axios
                            .put(`http://localhost:3000/路由地址/${this.id}`, this.formData) // (路由地址heroes /weapons / equips)
                            //接收返回的数据
                            .then( (response) => {
                                //获取返回的数据中的状态码
                                const status = response.status
                                //判断状态码
                                if (status === 200) {
                                    //修改成功 返回列表页面
                                    this.$router.push({name: '路由名称'}) //(路由地址heroes /weapons / equips)
                                } else {
                                    alert('修改失败')
                                }
                            })
                            .catch( (err) => {
                                alert('服务器异常' + err)
                            })
                    }
                }
            }
